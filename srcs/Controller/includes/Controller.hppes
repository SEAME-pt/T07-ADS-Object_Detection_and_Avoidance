#ifndef CONTROLLER_HPP
#define CONTROLLER_HPP

#include <SDL2/SDL.h>
#include <functional>
#include <unordered_map>
#include <array>
#include <memory>
#include "LaneDetector.hpp"
#include "JetCar.hpp"
#include <Eigen/Dense>
#include <chrono>

#define BTN_A 0
#define BTN_B 1
#define BTN_X 3
#define BTN_Y 4
#define BTN_LB 6
#define BTN_RB 7
#define BTN_SELECT 10
#define BTN_START 11
#define BTN_HOME 12
#define BTN_LSTICK 13
#define BTN_RSTICK 14

enum Mode {
    MODE_JOYSTICK,
    MODE_AUTONOMOUS
};

struct Actions {
    std::function<void()> onPress;
    std::function<void()> onRelease;
};

class Controller {
public:
    Controller(JetCar* jetCar);
    ~Controller();

    void setButtonAction(int button, Actions actions);
    void setAxisAction(int axis, std::function<void(int)> action);
    void processEvent(const SDL_Event& event);
    void setMode(const int &mode);
    int getMode();
    void listen();
    void setLaneDetector(std::unique_ptr<LaneDetector> detector);

    SDL_Joystick* joystick;
    JetCar* jetCar;
    std::unique_ptr<LaneDetector> laneDetector;
    std::unordered_map<int, Actions> buttonActions;
    std::unordered_map<int, std::function<void(int)>> axisActions;
    std::array<bool, 12> buttonStates;
    int _currentMode;
    cv::Mat frame, output_frame;
    cv::VideoWriter video_writer;

    // MPC Structures and Functions
    struct State {
        float x = 0.0f;      // X position (m)
        float y = 0.0f;      // Y position (m)
        float theta = 0.0f;  // Heading angle (rad)
        float v = 1.0f;      // Velocity (m/s)
    };
    State kinematicModel(const State& state, float delta, float a);  // Predict next state using kinematic bicycle model
    void setupCostFunction(Eigen::MatrixXd& H, Eigen::VectorXd& f, const Eigen::VectorXd& y_ref, const Eigen::VectorXd& theta_ref);  // Setup QP cost function
    Eigen::VectorXd solveMPC(const State& initial_state, const Eigen::VectorXd& y_ref, const Eigen::VectorXd& theta_ref);  // Solve MPC optimization

    // MPC Parameters
    State current_state_;  // Current vehicle state
    static constexpr float DT = 0.1f;      // Time step (s)
    static constexpr int N = 10;           // Prediction horizon (1 second total)
    static constexpr float L = 0.3f;       // Wheelbase (m)
    static constexpr float MAX_DELTA = 0.52f;  // Max steering angle (±90 deg in radians)
    static constexpr float MAX_A = 1.0f;         // Max acceleration (m/s²)
    static constexpr float Q_y = 10.0f;    // Weight for lateral offset
    static constexpr float Q_theta = 5.0f; // Weight for heading error
    static constexpr float R_delta = 1.0f; // Weight for steering effort
    static constexpr float R_a = 1.0f;     // Weight for acceleration effort
    static constexpr float R_d_delta = 50.0f; // Weight for steering rate of change

    void autonomous();  // Autonomous driving logic with curve prediction
};

#endif // CONTROLLER_HPP
